version: '3.8'

services:
  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: abunfi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - abunfi-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: abunfi-certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: abunfi-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    networks:
      - abunfi-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: abunfi-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      # Database configuration
      DATABASE_URL: postgresql://abunfi_user:${POSTGRES_PASSWORD}@postgres:5432/abunfi
      # Use memory cache instead of Redis for demo
      USE_MEMORY_CACHE: "true"
      # Application secrets
      JWT_SECRET: ${JWT_SECRET}
      # Blockchain configuration
      RPC_URL: ${RPC_URL}
      CHAIN_ID: ${CHAIN_ID}
      # Contract addresses
      VAULT_CONTRACT_ADDRESS: ${VAULT_CONTRACT_ADDRESS}
      # CORS configuration
      CORS_ORIGIN: https://${DOMAIN_NAME}
      # Web3Auth configuration
      WEB3AUTH_CLIENT_ID: ${WEB3AUTH_CLIENT_ID}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - backend_logs:/app/logs
    networks:
      - abunfi-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: abunfi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: abunfi
      POSTGRES_USER: abunfi_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
      - postgres_backups:/backups
    networks:
      - abunfi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U abunfi_user -d abunfi"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis removed for demo - using memory cache instead

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  postgres_backups:
    driver: local

networks:
  abunfi-network:
    driver: bridge
